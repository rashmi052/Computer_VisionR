# -*- coding: utf-8 -*-
"""CV_Assignment2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1K-wVJibmHUDmwXVMCAc-wDbGoARCaTLm
"""

pip install scikit-learn matplotlib

import numpy as np
import matplotlib.pyplot as plt
from matplotlib.colors import ListedColormap
from sklearn import datasets
from sklearn.neighbors import KNeighborsClassifier

# Load iris dataset
iris = datasets.load_iris()
X = iris.data[:, :2]  # Using only the first two features
y = iris.target

# Step size in the mesh
h = .02

# Create color maps
cmap_light = ListedColormap(['#FFAAAA', '#AAFFAA', '#AAAAFF'])
cmap_bold = ListedColormap(['#FF0000', '#00FF00', '#0000FF'])

# Define KNN classifier for k=1 and k=5
k_values = [1, 5]
classifiers = [KNeighborsClassifier(n_neighbors=k).fit(X, y) for k in k_values]


# Plot the decision boundary
plt.figure(figsize=(12, 6))
for i, clf in enumerate(classifiers):
    plt.subplot(1, 2, i + 1)


    x_min, x_max = X[:, 0].min() - 1, X[:, 0].max() + 1
    y_min, y_max = X[:, 1].min() - 1, X[:, 1].max() + 1
    xx, yy = np.meshgrid(np.arange(x_min, x_max, h),
                         np.arange(y_min, y_max, h))
    Z = clf.predict(np.c_[xx.ravel(), yy.ravel()])
    Z = Z.reshape(xx.shape)
    plt.pcolormesh(xx, yy, Z, cmap=cmap_light)

    plt.scatter(X[:, 0], X[:, 1], c=y, cmap=cmap_bold,
                edgecolor='k', s=20)
    plt.xlim(xx.min(), xx.max())
    plt.ylim(yy.min(), yy.max())
    plt.title(f"k = {k_values[i]}")
#show graph
plt.tight_layout()
plt.show()