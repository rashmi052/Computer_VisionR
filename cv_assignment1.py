# -*- coding: utf-8 -*-
"""CV_Assignment1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1F2WeTBFA0JRRvtvHOYOa4KDVXmhk88kt
"""

import cv2
import numpy as np
from skimage import io
import matplotlib.pylab as plt

def convert_to_grayscale(image):
    return cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

def compute_lbp_pixel(center, pixels):
    binary_values = (pixels >= center) * 1
    decimal_value = np.sum(binary_values * (2 ** np.arange(8)[::-1]))
    return decimal_value

def compute_lbp(image):
    height, width = image.shape
    lbp_result = np.zeros((height-2, width-2), dtype=np.uint8)

    for i in range(1, height-1):
        for j in range(1, width-1):
            center = image[i, j]
            neighbors = [
                image[i-1, j-1], image[i-1, j], image[i-1, j+1],
                image[i, j+1], image[i+1, j+1], image[i+1, j],
                image[i+1, j-1], image[i, j-1]
            ]

            lbp_value = compute_lbp_pixel(center, np.array(neighbors))
            lbp_result[i-1, j-1] = lbp_value

    return lbp_result

"""I have used a different image then what was given in question because I didnt have the image link."""

url="https://onlinejpgtools.com/images/examples-onlinejpgtools/sunflower.jpg"

color_image=io.imread(url)

gray_image = convert_to_grayscale(color_image)

lbp_result = compute_lbp(gray_image)

plt.subplot(1, 2, 1)
plt.imshow(gray_image, cmap='gray')
plt.title('Original Image')
plt.axis('off')

plt.subplot(1, 2, 2)
plt.imshow(lbp_result, cmap='gray')
plt.title('LBP Result')
plt.axis('off')