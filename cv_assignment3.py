# -*- coding: utf-8 -*-
"""CV_Assignment3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1bAzu7qcg3eRS_SKQ_urLaben7bL0nQTL
"""

import numpy as np

class TreeNode:
    def __init__(self, feature_index=None, threshold=None, left=None, right=None, info_gain=None, value=None):
        self.feature_index = feature_index
        self.threshold = threshold
        self.left = left
        self.right = right
        self.info_gain = info_gain
        self.value = value  # This will hold the class label if the node is a leaf

class DecisionTree:
    def __init__(self, max_depth=None):
        self.max_depth = max_depth

    def fit(self, X, y):
        self.num_classes = len(np.unique(y))
        self.root = self._grow_tree(X, y)

    def _entropy(self, y):
        _, counts = np.unique(y, return_counts=True)
        probabilities = counts / len(y)
        entropy = -np.sum(probabilities * np.log2(probabilities))
        return entropy

    def _information_gain(self, parent, left_child, right_child):
        n = len(parent)
        pl = len(left_child) / n
        pr = len(right_child) / n
        gain = self._entropy(parent) - (pl * self._entropy(left_child) + pr * self._entropy(right_child))
        return gain

    def _best_split(self, X, y):
        best_gain = -np.inf
        best_feature_index = None
        best_threshold = None

        n_features = X.shape[1]
        for feature_index in range(n_features):
            thresholds = np.unique(X[:, feature_index])
            for threshold in thresholds:
                left_indices = np.where(X[:, feature_index] <= threshold)[0]
                right_indices = np.where(X[:, feature_index] > threshold)[0]

                gain = self._information_gain(y, y[left_indices], y[right_indices])
                if gain > best_gain:
                    best_gain = gain
                    best_feature_index = feature_index
                    best_threshold = threshold

        return best_feature_index, best_threshold

    def _grow_tree(self, X, y, depth=0):
      num_samples_per_class = [np.sum(y == i) for i in range(self.num_classes)]
      predicted_class = np.argmax(num_samples_per_class)
      node = TreeNode(value=predicted_class)

      if depth < self.max_depth:
        best_gain = -np.inf
        best_feature_index, best_threshold = self._best_split(X, y)
        if best_feature_index is not None:
            left_indices = np.where(X[:, best_feature_index] <= best_threshold)[0]
            right_indices = np.where(X[:, best_feature_index] > best_threshold)[0]

            gain = self._information_gain(y, y[left_indices], y[right_indices])
            if gain > best_gain:
                best_gain = gain

                node = TreeNode(feature_index=best_feature_index, threshold=best_threshold,
                                info_gain=best_gain, value=predicted_class)
                node.left = self._grow_tree(X[left_indices, :], y[left_indices], depth + 1)
                node.right = self._grow_tree(X[right_indices, :], y[right_indices], depth + 1)

      return node


    def predict(self, X):
        return np.array([self._predict_tree(x, self.root) for x in X])

    def _predict_tree(self, x, node):
        if node.value is not None:
            return node.value
        if x[node.feature_index] <= node.threshold:
            return self._predict_tree(x, node.left)
        else:
            return self._predict_tree(x, node.right)

# Example usage:
from sklearn.datasets import load_iris
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score

# Load the Iris dataset
iris = load_iris()
X, y = iris.data, iris.target

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Initialize and fit the decision tree
tree = DecisionTree(max_depth=3)
tree.fit(X_train, y_train)

# Make predictions
predictions = tree.predict(X_test)

# Calculate accuracy
accuracy = accuracy_score(y_test, predictions)
print("Accuracy:", accuracy)